import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchMyStoreItem } from '../services/myStore.service';

const initialState = {
    items: '',
    initialItems: '',
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getMyStoreItemAsync = createAsyncThunk(
    'myStore/fetchStoreItem',
    async () => {
        const response = await fetchMyStoreItem();
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const myStoreItemSlice = createSlice({
    name: 'myStoreItem',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setMyStoreItems: (state, action) => {
            state.items = action.payload;
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getMyStoreItemAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getMyStoreItemAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.items = state.initialItems = action.payload; // Need to make 2 copies for search feature.
            });
    },
});

// Add selector
export const selectMyStoreItem = (state) => state.myStoreItem.items;
export const selectMyStoreInitialItems = (state) => state.myStoreItem.initialItems;
export const { setMyStoreItems } = myStoreItemSlice.actions;
export default myStoreItemSlice.reducer;